<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.renren.dao.MarketChannelDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="io.renren.entity.MarketChannelEntity" id="MarketChannelMap">
        <result property="statPeriod" column="STAT_PERIOD"/>
        <result property="channelHead" column="CHANNEL_HEAD"/>
        <result property="type" column="TYPE"/>
        <result property="channelName" column="CHANNEL_NAME"/>
        <result property="ctime" column="CTIME"/>
        <result property="actualCost" column="ACTUAL_COST"/>
        <result property="regCou" column="REG_COU"/>
        <result property="firstinvestCou" column="FIRSTINVEST_COU"/>
        <result property="firstinvestMoney" column="FIRSTINVEST_MONEY"/>
        <result property="firstinvestYMoney" column="FIRSTINVEST_Y_MONEY"/>
        <result property="invCou" column="INV_COU"/>
        <result property="invMoney" column="INV_MONEY"/>
        <result property="invYMoney" column="INV_Y_MONEY"/>
        <result property="ddzMoney" column="DDZ_MONEY"/>
        <result property="regCost" column="REG_COST"/>
        <result property="firstinvestCost" column="FIRSTINVEST_COST"/>
        <result property="avgFirstinvestMoney" column="AVG_FIRSTINVEST_MONEY"/>
        <result property="regInvConversion" column="REG_INV_CONVERSION"/>
        <result property="firstinvestRot" column="FIRSTINVEST_ROT"/>
        <result property="cumulativeRot" column="CUMULATIVE_ROT"/>
    </resultMap>


	<select id="queryList" resultType="io.renren.entity.MarketChannelEntity">
        DROP TABLE IF EXISTS TMP_dm_report_channel_data_01;
        DROP TABLE IF EXISTS TMP_dm_report_channel_data_02;

        CREATE TEMPORARY TABLE TMP_dm_report_channel_data_01
        SELECT
        CD.STAT_PERIOD,
        IFNULL(DC.CHANNEL_HEAD,'') AS CHANNEL_HEAD,
        IFNULL(CD.TYPE,'') AS TYPE,
        IFNULL(CD.CHANNEL_NAME,'') AS CHANNEL_NAME,
        DATE_FORMAT(CD.CTIME,'%Y%m%d') AS CTIME,
        IFNULL(CD.ACTUAL_COST,0) AS ACTUAL_COST,
        IFNULL(CD.REG_COU,0) AS REG_COU,
        IFNULL(CD.FIRSTINVEST_COU,0) AS FIRSTINVEST_COU,
        IFNULL(CD.FIRSTINVEST_MONEY,0) AS FIRSTINVEST_MONEY,
        IFNULL(CD.FIRSTINVEST_Y_MONEY,0) AS FIRSTINVEST_Y_MONEY,
        IFNULL(CD.INV_COU,0) AS INV_COU,
        IFNULL(CD.INV_MONEY,0) AS INV_MONEY,
        IFNULL(CD.INV_Y_MONEY,0) AS INV_Y_MONEY,
        IFNULL(CD.DDZ_MONEY,0) AS DDZ_MONEY,
        IFNULL(CD.REG_COST,0) AS REG_COST,
        IFNULL(CD.FIRSTINVEST_COST,0) AS FIRSTINVEST_COST,
        IFNULL( CD.AVG_FIRSTINVEST_MONEY,0) AS AVG_FIRSTINVEST_MONEY,
        IFNULL(CD.REG_INV_CONVERSION,0) AS REG_INV_CONVERSION,
        IFNULL(CD.FIRSTINVEST_ROT,0) AS FIRSTINVEST_ROT,
        IFNULL(CD.CUMULATIVE_ROT,0) AS CUMULATIVE_ROT
        FROM
        dm_report_channel_data CD
        LEFT JOIN
        (
        SELECT DISTINCT CHANNEL_NAME_BACK,CHANNEL_HEAD
        FROM dim_channel
        WHERE STATUS = 1
        ) DC ON (CD.CHANNEL_NAME = DC.CHANNEL_NAME_BACK)
        WHERE 1 = 1
        <if test="channelName!=null and channelName.size()!=0">
            AND CD.CHANNEL_NAME IN
            <foreach item="channelName" collection="channelName" open="(" separator="," close=")">
                #{channelName}
            </foreach>
        </if>
        <if test="channelHead != null and channelHead.trim() != ''">
            AND DC.CHANNEL_HEAD = #{channelHead}
        </if>
        <if test="reg_begindate != null and reg_begindate.trim() != '' and reg_enddate != null and reg_enddate.trim() != ''">
            AND CD.STAT_PERIOD BETWEEN #{reg_begindate} AND #{reg_enddate}
        </if>
        ;
        CREATE TEMPORARY TABLE TMP_dm_report_channel_data_02
        SELECT
        '' as STAT_PERIOD,
        'all-总计' AS CHANNEL_HEAD,
        '' AS TYPE,
        '' AS CHANNEL_NAME,
        DATE_FORMAT(NOW(),'%Y%m%d') AS CTIME,
        SUM(IFNULL(ACTUAL_COST,0)) AS ACTUAL_COST,
        SUM(IFNULL(REG_COU,0)) AS REG_COU,
        SUM(IFNULL(FIRSTINVEST_COU,0)) AS FIRSTINVEST_COU,
        SUM(IFNULL(FIRSTINVEST_MONEY,0)) AS FIRSTINVEST_MONEY,
        SUM(IFNULL(FIRSTINVEST_Y_MONEY,0)) AS FIRSTINVEST_Y_MONEY,
        SUM(IFNULL(INV_COU,0)) AS INV_COU,
        SUM(IFNULL(INV_MONEY,0)) AS INV_MONEY,
        SUM(IFNULL(INV_Y_MONEY,0)) AS INV_Y_MONEY,
        SUM(IFNULL(DDZ_MONEY,0)) AS DDZ_MONEY,
        SUM(IFNULL(REG_COST,0)) AS REG_COST,
        SUM(IFNULL(FIRSTINVEST_COST,0)) AS FIRSTINVEST_COST,
        SUM(IFNULL(AVG_FIRSTINVEST_MONEY,0)) AS AVG_FIRSTINVEST_MONEY,
        SUM(IFNULL(REG_INV_CONVERSION,0)) AS REG_INV_CONVERSION,
        SUM(IFNULL(FIRSTINVEST_ROT,0)) AS FIRSTINVEST_ROT,
        SUM(IFNULL(CUMULATIVE_ROT,0)) AS CUMULATIVE_ROT
        FROM TMP_dm_report_channel_data_01
        ;



        SELECT * FROM TMP_dm_report_channel_data_02
        UNION ALL
        SELECT * FROM TMP_dm_report_channel_data_01
        ;
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*)
        FROM
        TMP_dm_report_channel_data_01;
	</select>


</mapper>