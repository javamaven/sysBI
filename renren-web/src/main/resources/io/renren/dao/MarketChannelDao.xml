<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.renren.dao.MarketChannelDao">

	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="io.renren.entity.MarketChannelEntity" id="MarketChannelMap">
        <result property="statPeriod" column="STAT_PERIOD"/>
        <result property="channelHead" column="CHANNEL_HEAD"/>
        <result property="type" column="TYPE"/>
        <result property="channelName" column="CHANNEL_NAME"/>
        <result property="ctime" column="CTIME"/>
        <result property="actualCost" column="ACTUAL_COST"/>
        <result property="regCou" column="REG_COU"/>
        <result property="firstinvestCou" column="FIRSTINVEST_COU"/>
        <result property="firstinvestMoney" column="FIRSTINVEST_MONEY"/>
        <result property="firstinvestYMoney" column="FIRSTINVEST_Y_MONEY"/>
        <result property="invCou" column="INV_COU"/>
        <result property="invMoney" column="INV_MONEY"/>
        <result property="invYMoney" column="INV_Y_MONEY"/>
        <result property="ddzMoney" column="DDZ_MONEY"/>
        <result property="regCost" column="REG_COST"/>
        <result property="firstinvestCost" column="FIRSTINVEST_COST"/>
        <result property="avgFirstinvestMoney" column="AVG_FIRSTINVEST_MONEY"/>
        <result property="regInvConversion" column="REG_INV_CONVERSION"/>
        <result property="firstinvestRot" column="FIRSTINVEST_ROT"/>
        <result property="cumulativeRot" column="CUMULATIVE_ROT"/>
    </resultMap>


	<select id="queryList" resultType="io.renren.entity.MarketChannelEntity">
        DROP TABLE IF EXISTS TMP_dm_report_channel_data_01;
        DROP TABLE IF EXISTS TMP_dm_report_channel_data_02;

        CREATE TEMPORARY TABLE TMP_dm_report_channel_data_01
        SELECT
        IFNULL(CO.STAT_PERIOD,'') AS STAT_PERIOD,
        IFNULL(CO.CHANNEL_HEAD,'') AS CHANNEL_HEAD,
        IFNULL(CO.TYPE,'') AS TYPE,
        IFNULL(CO.CHANNEL_NAME,'') AS CHANNEL_NAME,
        IFNULL(CO.CHANNEL_LABEL,'') AS CHANNEL_LABEL,
        IFNULL((SUM(ACTUAL_COST)),0) AS ACTUAL_COST,
        IFNULL((SUM(REG_COU)),0) AS REG_COU,
        IFNULL((SUM(FIRSTINVEST_COU)),0) AS FIRSTINVEST_COU,
        IFNULL((SUM(FIRSTINVEST_MONEY)),0) AS FIRSTINVEST_MONEY,
        IFNULL((SUM(FIRSTINVESTYEARAMOUNT)),0) AS FIRSTINVEST_Y_MONEY,
        IFNULL((MAX(TMP.INV_COU)),0) AS INV_COU,
        IFNULL((SUM(INV_MONEY)),0) AS INV_MONEY,
        IFNULL((SUM(YEARAMOUNT)),0) AS INV_Y_MONEY,
        IFNULL((SUM(DDZ_AMOUNT)),0) AS DDZ_MONEY,
        FORMAT(IFNULL((SUM(ACTUAL_COST))/(SUM(REG_COU)),0),2) AS REG_COST,
        FORMAT(IFNULL((SUM(ACTUAL_COST))/(SUM(FIRSTINVEST_COU)),0),2) AS FIRSTINVEST_COST,
        FORMAT(IFNULL((SUM(FIRSTINVEST_MONEY))/(SUM(FIRSTINVEST_COU)),0),2) AS AVG_FIRSTINVEST_MONEY,
        FORMAT(IFNULL((SUM(FIRSTINVEST_COU))/(SUM(REG_COU)),0),2) AS REG_INV_CONVERSION,
        FORMAT(IFNULL((SUM(FIRSTINVEST_MONEY))/(SUM(ACTUAL_COST)),0),2) AS FIRSTINVEST_ROT,
        FORMAT(IFNULL((SUM(INV_MONEY))/(SUM(ACTUAL_COST)),0),2) AS CUMULATIVE_ROT
        FROM
        dm_report_channel_owner CO
        LEFT JOIN (
        SELECT
        DC.CHANNEL_NAME,
        DC.CHANNEL_HEAD,
        DC.PAYMENT_WAY AS TYPE,
        COUNT(DISTINCT UAD.USER_ID) AS INV_COU
        FROM
        edw_trading_project_detail UAD

        left JOIN edw_user_basic EUB ON (UAD.USER_ID = EUB.USER_ID)
        LEFT JOIN	dim_channel DC ON (EUB.CHANNEL_ID=DC.CHANNEL_ID)
        WHERE 1=1
        <if test="channelName_a!=null and channelName_a.size()!=0">
            AND DC.CHANNEL_NAME IN
            <foreach item="channelName_a" collection="channelName_a" open="(" separator="," close=")">
                #{channelName}
            </foreach>

        </if>
        <if test="reg_begindate != null and reg_begindate.trim() != '' and reg_enddate != null and reg_enddate.trim() != ''">
            AND DATE_FORMAT(STR_TO_DATE(ADDTIME,'%Y-%m-%d %H:%i:%s'),'%Y%m%d') BETWEEN #{reg_begindate} AND #{reg_enddate}
        </if>
        GROUP BY
        DC.CHANNEL_NAME,
        DC.CHANNEL_HEAD,
        DC.PAYMENT_WAY
        ) TMP ON (CO.CHANNEL_NAME=TMP.CHANNEL_NAME
        AND CO.CHANNEL_HEAD= TMP.CHANNEL_HEAD AND CO.TYPE=TMP.TYPE)
        where 1=1
        <if test="channelName!=null and channelName.size()!=0">
            AND CO.CHANNEL_NAME IN
            <foreach item="channelName" collection="channelName" open="(" separator="," close=")">
                #{channelName}
            </foreach>
        </if>
        <if test="reg_begindate != null and reg_begindate.trim() != '' and reg_enddate != null and reg_enddate.trim() != ''">
            AND CO.STAT_PERIOD BETWEEN #{reg_begindate} AND #{reg_enddate}
        </if>
        <if test="channelHead != null and channelHead.trim() != ''">
            AND CO.CHANNEL_HEAD = #{channelHead}
        </if>
        GROUP BY
        IFNULL(CO.STAT_PERIOD,''),
        IFNULL(CO.CHANNEL_HEAD,''),
        IFNULL(CO.TYPE,''),
        IFNULL(CO.CHANNEL_NAME,'')
        ;


        CREATE TEMPORARY TABLE TMP_dm_report_channel_data_02
        SELECT *
        FROM TMP_dm_report_channel_data_01
        ;
        select *
        from  TMP_dm_report_channel_data_02
        ORDER BY STAT_PERIOD DESC,CHANNEL_HEAD,TYPE,CHANNEL_NAME
        <if test="page != null and limit != null">
            limit #{page}, #{limit}
        </if>
        ;
	</select>

 	<select id="queryTotal" resultType="int">
		select count(*)
        FROM
        TMP_dm_report_channel_data_01;
	</select>




</mapper>